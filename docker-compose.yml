version: '3.8'

services:
  server:
    build:
      context: .
      dockerfile: cmd/server/Dockerfile
    ports:
      - "0.0.0.0:${SERVICE_PORT}:${SERVICE_PORT}"
    environment:
      - DATABASE_HOST=${DB_HOST}
      - DATABASE_PORT=${DB_PORT}
      - DATABASE_USER=${DB_USER}
      - DATABASE_PASSWORD=${DB_PASSWORD}
      - DATABASE_NAME=${DB_NAME}
      - SERVICE_PORT=${SERVICE_PORT}
    depends_on:
      db:
        condition: service_healthy

  worker:
    build:
      context: .
      dockerfile: cmd/worker/Dockerfile
    environment:
      - DATABASE_HOST=${DB_HOST}
      - DATABASE_PORT=${DB_PORT}
      - DATABASE_USER=${DB_USER}
      - DATABASE_PASSWORD=${DB_PASSWORD}
      - DATABASE_NAME=${DB_NAME}
      - SERVICE_PORT=${SERVICE_PORT}
      - EXCHANGERATESAPI_API_KEY=${EXCHANGERATESAPI_API_KEY}
      - EXCHANGERATESAPI_BASE_URL=${EXCHANGERATESAPI_BASE_URL}
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:13.22-alpine3.22
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "0.0.0.0:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrate:
    image: migrate/migrate:4
    container_name: postgres_migrate
    volumes:
      - ./migrations:/migrations
    command: [
      "-path", "/migrations",
      "-database", "${MIGRATE_DB_URL}",
      "up"
    ]
    depends_on:
      db:
        condition: service_healthy
    restart: "no"
  
volumes:
  postgres_data: